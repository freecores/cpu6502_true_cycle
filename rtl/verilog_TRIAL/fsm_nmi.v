`define false 1'b 0
`define FALSE 1'b 0
`define true 1'b 1
`define TRUE 1'b 1

`timescale 1 ns / 1 ns // timescale for following modules


//  VHDL Entity R6502_TC.FSM_NMI.symbol
// 
//  Created:
//           by - eda.UNKNOWN (TEST)
//           at - 19:25:41 10.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 

module FSM_NMI (
   clk_clk_i,
   fetch_i,
   nmi_n_i,
   rst_rst_n_i,
   nmi_o);
 

input   clk_clk_i; 
input   fetch_i; 
input   nmi_n_i; 
input   rst_rst_n_i; 
output   nmi_o; 


//  Jens-D. Gutschmidt     Project:  R6502_TC  
//  scantara2003@yahoo.de                      
//  COPYRIGHT (C) 2008-2009 by Jens Gutschmidt and OPENCORES.ORG                                                                                
//                                                                                                                                              
//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by   
//  the Free Software Foundation, either version 3 of the License, or any later version.                                                        
//                                                                                                                                              
//  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of              
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                                  
//                                                                                                                                              
//  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.     
//                                                                                                                                              
//  CVS Revisins History                                                                                                                        
//                                                                                                                                              
//  $Log: not supported by cvs2svn $                                                                                                                            
//    <<-- more -->>                                                                                                                            
//  Title:  FSM for NMI  
//  Path:  R6502_TC/FSM_NMI/fsm  
//  Edited:  by eda on 10 Feb 2009  
// 
//  VHDL Architecture R6502_TC.FSM_NMI.fsm
// 
//  Created:
//           by - eda.UNKNOWN (TEST)
//           at - 19:25:41 10.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 
wire    nmi_o; 

//  Declarations
parameter idle = 2'b 00; 
parameter idle1 = 2'b 01; 
parameter idle2 = 2'b 11; 
parameter IMP = 2'b 10; 

//  Declare current and next state signals
reg     [1:0] current_state; 
reg     [1:0] next_state; 

//  Declare any pre-registered internal signals
reg     nmi_o_cld; 

// ---------------------------------------------------------------


always @(posedge clk_clk_i or negedge rst_rst_n_i)
   begin : clocked_proc
   if (rst_rst_n_i == 1'b 0)
      begin
      current_state <= idle;   

//  Default Reset Values
      nmi_o_cld <= 1'b 0;   
      end
   else
      begin
      current_state <= next_state;   

//  Default Assignment To Internals
      nmi_o_cld <= 1'b 0;   

//  Combined Actions
      case (current_state)
      IMP:
         begin
         nmi_o_cld <= 1'b 1;   
         end
      default:
         ;
      endcase
      end
   end

// ---------------------------------------------------------------

// ---------------------------------------------------------------

always @(current_state or fetch_i or nmi_n_i)
   begin : nextstate_proc
   case (current_state)
   idle:
      begin
      if (nmi_n_i == 1'b 1)
         begin
         next_state <= idle1;   
         end
      else
         begin
         next_state <= idle;   
         end
      end
   idle1:
      begin
      if (nmi_n_i == 1'b 0)
         begin
         next_state <= idle2;   
         end
      else
         begin
         next_state <= idle1;   
         end
      end
   idle2:
      begin
      if (nmi_n_i == 1'b 0)
         begin
         next_state <= IMP;   
         end
      else
         begin
         next_state <= idle;   
         end
      end
   IMP:
      begin
      if (fetch_i == 1'b 1)
         begin
         next_state <= idle;   
         end
      else
         begin
         next_state <= IMP;   
         end
      end
   default:
      begin
      next_state <= idle;   
      end
   endcase
   end

//  Concurrent Statements
//  Clocked output assignments

// ---------------------------------------------------------------
assign nmi_o = nmi_o_cld; 

endmodule // module FSM_NMI

