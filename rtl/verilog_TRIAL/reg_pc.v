`define false 1'b 0
`define FALSE 1'b 0
`define true 1'b 1
`define TRUE 1'b 1

`timescale 1 ns / 1 ns // timescale for following modules


//  VHDL Entity R6502_TC.Reg_PC.symbol
// 
//  Created:
//           by - eda.UNKNOWN (TEST)
//           at - 19:25:31 10.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 

module Reg_PC (
   adr_i,
   clk_clk_i,
   ld_i,
   ld_pc_i,
   offset_i,
   rst_rst_n_i,
   sel_pc_in_i,
   sel_pc_val_i,
   adr_nxt_pc_o,
   adr_pc_o);
 

input   [15:0] adr_i; 
input   clk_clk_i; 
input   [1:0] ld_i; 
input   ld_pc_i; 
input   [15:0] offset_i; 
input   rst_rst_n_i; 
input   sel_pc_in_i; 
input   [1:0] sel_pc_val_i; 
output   [15:0] adr_nxt_pc_o; 
output   [15:0] adr_pc_o; 


//  Jens-D. Gutschmidt     Project:  R6502_TC  
//  scantara2003@yahoo.de                      
//  COPYRIGHT (C) 2008-2009 by Jens Gutschmidt and OPENCORES.ORG                                                                                
//                                                                                                                                              
//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by   
//  the Free Software Foundation, either version 3 of the License, or any later version.                                                        
//                                                                                                                                              
//  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of              
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                                  
//                                                                                                                                              
//  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.     
//                                                                                                                                              
//  CVS Revisins History                                                                                                                        
//                                                                                                                                              
//  $Log: not supported by cvs2svn $                                                                                                                         
//    <<-- more -->>                                                                                                                            
//  Title:  Program Counter Logic  
//  Path:  R6502_TC/Reg_PC/struct  
//  Edited:  by eda on 10 Feb 2009  
// 
//  VHDL Architecture R6502_TC.Reg_PC.struct
// 
//  Created:
//           by - eda.UNKNOWN (TEST)
//           at - 19:25:32 10.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 
wire    [15:0] adr_nxt_pc_o; 
wire    [15:0] adr_pc_o; 

//  Declarations
reg     [7:0] adr_pc_high_o_i; 
reg     [7:0] adr_pc_low_o_i; 
reg     [15:0] adr_pc_o_i; 
wire    ci_o_i; 
reg     cout_pc_o_i; 
wire    load3_o_i; 
wire    load_o_i; 
reg     [7:0] offset_high_o_i; 
reg     [7:0] offset_low_o_i; 
reg     [7:0] val_o_i; 
wire    [7:0] val_one; 
wire    [7:0] val_zero; 

//  Implicit buffer signal declarations
wire    [15:0] adr_pc_o_internal; 
reg     [15:0] adr_nxt_pc_o_internal; 

//  ModuleWare signal declarations(v1.9) for instance 'U_0' of 'adff'
reg     [7:0] mw_U_0reg_cval; 

//  ModuleWare signal declarations(v1.9) for instance 'U_4' of 'adff'
reg     [7:0] mw_U_4reg_cval; 

//  ModuleWare signal declarations(v1.9) for instance 'U_3' of 'split'
wire    [15:0] mw_U_3temp_din; 

//  ModuleWare signal declarations(v1.9) for instance 'U_5' of 'split'
wire    [15:0] mw_U_5temp_din; 

//  ModuleWare code(v1.9) for instance 'U_2' of 'add'
reg     [8:0]  u_2combo_proc_temp_din0; 
reg     [8:0]  u_2combo_proc_temp_din1; 
reg     [8:0]  u_2combo_proc_temp_sum; 
reg      u_2combo_proc_temp_carry; 
reg     [8:0]  u_11combo_proc_temp_din0; 
reg     [8:0]  u_11combo_proc_temp_din1; 
reg     [8:0]  u_11combo_proc_temp_sum; 
reg      u_11combo_proc_temp_carry; 
reg     [15:0]  u_3combo_proc_temp_din; 
reg     [15:0]  u_5combo_proc_temp_din; 


always @(adr_pc_low_o_i or val_o_i)
   begin : u_2combo_proc
   u_2combo_proc_temp_din0 = {1'b 0, adr_pc_low_o_i};   
   u_2combo_proc_temp_din1 = {1'b 0, val_o_i};   
   u_2combo_proc_temp_carry = 1'b 0;   
   u_2combo_proc_temp_sum = u_2combo_proc_temp_din0 + u_2combo_proc_temp_din1 + u_2combo_proc_temp_carry;   
   adr_nxt_pc_o_internal[7:0] <= u_2combo_proc_temp_sum[7:0];   
   cout_pc_o_i <= u_2combo_proc_temp_sum[8];   
   end

//  ModuleWare code(v1.9) for instance 'U_11' of 'add'

always @(adr_pc_high_o_i or offset_high_o_i or ci_o_i)
   begin : u_11combo_proc
   u_11combo_proc_temp_din0 = {1'b 0, adr_pc_high_o_i};   
   u_11combo_proc_temp_din1 = {1'b 0, offset_high_o_i};   
   u_11combo_proc_temp_carry = ci_o_i;   
   u_11combo_proc_temp_sum = u_11combo_proc_temp_din0 + u_11combo_proc_temp_din1 + u_11combo_proc_temp_carry;   
   adr_nxt_pc_o_internal[15:8] <= u_11combo_proc_temp_sum[7:0];   
   end

//  ModuleWare code(v1.9) for instance 'U_0' of 'adff'
assign adr_pc_o_internal[7:0] = mw_U_0reg_cval; 

always @(clk_clk_i or rst_rst_n_i)
   begin : u_0seq_proc
   if (rst_rst_n_i == 1'b 0 | rst_rst_n_i == 1'b 0)
      begin
      mw_U_0reg_cval <= 8'b 00000000;   
      end
   else if (clk_clk_i /* ignored attribute: 'EVENT */ & clk_clk_i == 1'b 1 )
      begin
      if (load_o_i == 1'b 1 | load_o_i == 1'b 1)
         begin
         mw_U_0reg_cval <= adr_nxt_pc_o_internal[7:0];   
         end
      end
   end

//  ModuleWare code(v1.9) for instance 'U_4' of 'adff'
assign adr_pc_o_internal[15:8] = mw_U_4reg_cval; 

always @(clk_clk_i or rst_rst_n_i)
   begin : u_4seq_proc
   if (rst_rst_n_i == 1'b 0 | rst_rst_n_i == 1'b 0)
      begin
      mw_U_4reg_cval <= 8'b 00000000;   
      end
   else if (clk_clk_i /* ignored attribute: 'EVENT */ & clk_clk_i == 1'b 1 )
      begin
      if (load3_o_i == 1'b 1 | load3_o_i == 1'b 1)
         begin
         mw_U_4reg_cval <= adr_nxt_pc_o_internal[15:8];   
         end
      end
   end

//  ModuleWare code(v1.9) for instance 'U_6' of 'and'
assign load_o_i = ld_pc_i & ld_i[0]; 

//  ModuleWare code(v1.9) for instance 'U_7' of 'and'
assign load3_o_i = ld_pc_i & ld_i[1]; 

//  ModuleWare code(v1.9) for instance 'U_10' of 'and'
assign ci_o_i = cout_pc_o_i & ld_pc_i; 

//  ModuleWare code(v1.9) for instance 'U_1' of 'constval'
assign val_zero = 8'b 00000000; 

//  ModuleWare code(v1.9) for instance 'U_9' of 'constval'
assign val_one = 8'b 00000001; 

//  ModuleWare code(v1.9) for instance 'U_8' of 'mux'

always @(adr_pc_o_internal or adr_i or sel_pc_in_i)
   begin : u_8combo_proc
   case (sel_pc_in_i)
   1'b 0,
   1'b 0:
      begin
      adr_pc_o_i <= adr_pc_o_internal;   
      end
   1'b 1,
   1'b 1:
      begin
      adr_pc_o_i <= adr_i;   
      end
   default:
      begin
      adr_pc_o_i <= {16{1'b X}};   
      end
   endcase
   end

//  ModuleWare code(v1.9) for instance 'U_13' of 'mux'

always @(val_one or val_zero or offset_low_o_i or sel_pc_val_i)
   begin : u_13combo_proc
   case (sel_pc_val_i)
   2'b 00,
   2'b 00,
   2'b 00,
   2'b 00:
      begin
      val_o_i <= val_one;   
      end
   2'b 01,
   2'b 01,
   2'b 01,
   2'b 01:
      begin
      val_o_i <= val_zero;   
      end
   2'b 10,
   2'b 10,
   2'b 10,
   2'b 10:
      begin
      val_o_i <= offset_low_o_i;   
      end
   2'b 11,
   2'b 11,
   2'b 11,
   2'b 11:
      begin
      val_o_i <= val_zero;   
      end
   default:
      begin
      val_o_i <= {8{1'b X}};   
      end
   endcase
   end

//  ModuleWare code(v1.9) for instance 'U_3' of 'split'
assign mw_U_3temp_din = adr_pc_o_i; 

always @(mw_U_3temp_din)
   begin : u_3combo_proc
   u_3combo_proc_temp_din = mw_U_3temp_din[15:0];   
   adr_pc_low_o_i <= u_3combo_proc_temp_din[7:0];   
   adr_pc_high_o_i <= u_3combo_proc_temp_din[15:8];   
   end

//  ModuleWare code(v1.9) for instance 'U_5' of 'split'
assign mw_U_5temp_din = offset_i; 

always @(mw_U_5temp_din)
   begin : u_5combo_proc
   u_5combo_proc_temp_din = mw_U_5temp_din[15:0];   
   offset_low_o_i <= u_5combo_proc_temp_din[7:0];   
   offset_high_o_i <= u_5combo_proc_temp_din[15:8];   
   end

//  Instance port mappings.
//  Implicit buffered output assignments
assign adr_pc_o = adr_pc_o_internal; 
assign adr_nxt_pc_o = adr_nxt_pc_o_internal; 

//  Architecture declarations
//  Internal signal declarations

endmodule // module Reg_PC

