`define false 1'b 0
`define FALSE 1'b 0
`define true 1'b 1
`define TRUE 1'b 1

`timescale 1 ns / 1 ns // timescale for following modules


//  VHDL Entity R6502_TC.RegBank_AXY.symbol
// 
//  Created:
//           by - eda.UNKNOWN (TEST)
//           at - 19:25:32 10.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 

module RegBank_AXY (
   clk_clk_i,
   d_regs_in_i,
   load_regs_i,
   rst_rst_n_i,
   sel_rb_in_i,
   sel_rb_out_i,
   sel_reg_i,
   d_regs_out_o,
   q_a_o,
   q_x_o,
   q_y_o);
 

input   clk_clk_i; 
input   [7:0] d_regs_in_i; 
input   load_regs_i; 
input   rst_rst_n_i; 
input   [1:0] sel_rb_in_i; 
input   [1:0] sel_rb_out_i; 
input   [1:0] sel_reg_i; 
output   [7:0] d_regs_out_o; 
output   [7:0] q_a_o; 
output   [7:0] q_x_o; 
output   [7:0] q_y_o; 


//  Jens-D. Gutschmidt     Project:  R6502_TC  
//  scantara2003@yahoo.de                      
//  COPYRIGHT (C) 2008-2009 by Jens Gutschmidt and OPENCORES.ORG                                                                                
//                                                                                                                                              
//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by   
//  the Free Software Foundation, either version 3 of the License, or any later version.                                                        
//                                                                                                                                              
//  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of              
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                                  
//                                                                                                                                              
//  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.     
//                                                                                                                                              
//  CVS Revisins History                                                                                                                        
//                                                                                                                                              
//  $Log: not supported by cvs2svn $                                                                                                                         
//    <<-- more -->>                                                                                                                            
//  Title:  Register Bank for register A, X and Y  
//  Path:  R6502_TC/RegBank_AXY/struct  
//  Edited:  by eda on 10 Feb 2009  
// 
//  VHDL Architecture R6502_TC.RegBank_AXY.struct
// 
//  Created:
//           by - eda.UNKNOWN (TEST)
//           at - 19:25:32 10.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 
reg     [7:0] d_regs_out_o; 
wire    [7:0] q_a_o; 
wire    [7:0] q_x_o; 
wire    [7:0] q_y_o; 

//  Declarations
reg     [2:0] ld; 
wire    load1_o_i; 
wire    load2_o_i; 
wire    load_o_i; 
reg     [7:0] q_mux_o_i; 
wire    [7:0] val_zero; 

//  Implicit buffer signal declarations
wire    [7:0] q_a_o_internal; 
wire    [7:0] q_x_o_internal; 
wire    [7:0] q_y_o_internal; 

//  ModuleWare signal declarations(v1.9) for instance 'U_0' of 'adff'
reg     [7:0] mw_U_0reg_cval; 

//  ModuleWare signal declarations(v1.9) for instance 'U_4' of 'adff'
reg     [7:0] mw_U_4reg_cval; 

//  ModuleWare signal declarations(v1.9) for instance 'U_5' of 'adff'
reg     [7:0] mw_U_5reg_cval; 

//  ModuleWare code(v1.9) for instance 'U_0' of 'adff'

assign q_a_o_internal = mw_U_0reg_cval; 

always @(clk_clk_i or rst_rst_n_i)
   begin : u_0seq_proc
   if (rst_rst_n_i == 1'b 0 | rst_rst_n_i == 1'b 0)
      begin
      mw_U_0reg_cval <= 8'b 00000000;   
      end
   else if (clk_clk_i /* ignored attribute: 'EVENT */ & clk_clk_i == 1'b 1 )
      begin
      if (load_o_i == 1'b 1 | load_o_i == 1'b 1)
         begin
         mw_U_0reg_cval <= q_mux_o_i;   
         end
      end
   end

//  ModuleWare code(v1.9) for instance 'U_4' of 'adff'
assign q_x_o_internal = mw_U_4reg_cval; 

always @(clk_clk_i or rst_rst_n_i)
   begin : u_4seq_proc
   if (rst_rst_n_i == 1'b 0 | rst_rst_n_i == 1'b 0)
      begin
      mw_U_4reg_cval <= 8'b 00000000;   
      end
   else if (clk_clk_i /* ignored attribute: 'EVENT */ & clk_clk_i == 1'b 1 )
      begin
      if (load1_o_i == 1'b 1 | load1_o_i == 1'b 1)
         begin
         mw_U_4reg_cval <= q_mux_o_i;   
         end
      end
   end

//  ModuleWare code(v1.9) for instance 'U_5' of 'adff'
assign q_y_o_internal = mw_U_5reg_cval; 

always @(clk_clk_i or rst_rst_n_i)
   begin : u_5seq_proc
   if (rst_rst_n_i == 1'b 0 | rst_rst_n_i == 1'b 0)
      begin
      mw_U_5reg_cval <= 8'b 00000000;   
      end
   else if (clk_clk_i /* ignored attribute: 'EVENT */ & clk_clk_i == 1'b 1 )
      begin
      if (load2_o_i == 1'b 1 | load2_o_i == 1'b 1)
         begin
         mw_U_5reg_cval <= q_mux_o_i;   
         end
      end
   end

//  ModuleWare code(v1.9) for instance 'U_6' of 'and'
assign load_o_i = load_regs_i & ld[0]; 

//  ModuleWare code(v1.9) for instance 'U_7' of 'and'
assign load1_o_i = load_regs_i & ld[1]; 

//  ModuleWare code(v1.9) for instance 'U_8' of 'and'
assign load2_o_i = load_regs_i & ld[2]; 

//  ModuleWare code(v1.9) for instance 'U_11' of 'constval'
assign val_zero = 8'b 00000000; 

//  ModuleWare code(v1.9) for instance 'U_1' of 'decoder1'

always @(sel_reg_i)
   begin : u_1combo_proc
   ld <= {3{1'b 0}};   
   case (sel_reg_i)
   2'b 00:
      begin
      ld[0] <= 1'b 1;   
      end
   2'b 01:
      begin
      ld[1] <= 1'b 1;   
      end
   2'b 10:
      begin
      ld[2] <= 1'b 1;   
      end
   default:
      begin
      ld <= {3{1'b 0}};   
      end
   endcase
   end

//  ModuleWare code(v1.9) for instance 'U_2' of 'mux'

always @(q_a_o_internal or q_x_o_internal or q_y_o_internal or val_zero or sel_rb_out_i)
   begin : u_2combo_proc
   case (sel_rb_out_i)
   2'b 00,
   2'b 00,
   2'b 00,
   2'b 00:
      begin
      d_regs_out_o <= q_a_o_internal;   
      end
   2'b 01,
   2'b 01,
   2'b 01,
   2'b 01:
      begin
      d_regs_out_o <= q_x_o_internal;   
      end
   2'b 10,
   2'b 10,
   2'b 10,
   2'b 10:
      begin
      d_regs_out_o <= q_y_o_internal;   
      end
   2'b 11,
   2'b 11,
   2'b 11,
   2'b 11:
      begin
      d_regs_out_o <= val_zero;   
      end
   default:
      begin
      d_regs_out_o <= {8{1'b X}};   
      end
   endcase
   end

//  ModuleWare code(v1.9) for instance 'U_3' of 'mux'

always @(q_a_o_internal or q_y_o_internal or q_x_o_internal or d_regs_in_i or sel_rb_in_i)
   begin : u_3combo_proc
   case (sel_rb_in_i)
   2'b 00,
   2'b 00,
   2'b 00,
   2'b 00:
      begin
      q_mux_o_i <= q_a_o_internal;   
      end
   2'b 01,
   2'b 01,
   2'b 01,
   2'b 01:
      begin
      q_mux_o_i <= q_y_o_internal;   
      end
   2'b 10,
   2'b 10,
   2'b 10,
   2'b 10:
      begin
      q_mux_o_i <= q_x_o_internal;   
      end
   2'b 11,
   2'b 11,
   2'b 11,
   2'b 11:
      begin
      q_mux_o_i <= d_regs_in_i;   
      end
   default:
      begin
      q_mux_o_i <= {8{1'b X}};   
      end
   endcase
   end

//  Instance port mappings.
//  Implicit buffered output assignments
assign q_a_o = q_a_o_internal; 
assign q_x_o = q_x_o_internal; 
assign q_y_o = q_y_o_internal; 

//  Architecture declarations
//  Internal signal declarations

endmodule // module RegBank_AXY

