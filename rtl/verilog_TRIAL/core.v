`define false 1'b 0
`define FALSE 1'b 0
`define true 1'b 1
`define TRUE 1'b 1

`timescale 1 ns / 1 ns // timescale for following modules


//  VHDL Entity R6502_TC.Core.symbol
// 
//  Created:
//           by - eda.UNKNOWN (ENTWICKL4-XP-PR)
//           at - 11:47:55 23.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 

module Core (
   clk_clk_i,
   d_i,
   irq_n_i,
   nmi_n_i,
   rdy_i,
   rst_rst_n_i,
   so_n_i,
   a_o,
   d_o,
   rd_o,
   sync_o,
   wr_o);
 

input   clk_clk_i; 
input   [7:0] d_i; 
input   irq_n_i; 
input   nmi_n_i; 
input   rdy_i; 
input   rst_rst_n_i; 
input   so_n_i; 
output   [15:0] a_o; 
output   [7:0] d_o; 
output   rd_o; 
output   sync_o; 
output   wr_o; 


//  Jens-D. Gutschmidt     Project:  R6502_TC  
//  scantara2003@yahoo.de                      
//  COPYRIGHT (C) 2008-2009 by Jens Gutschmidt and OPENCORES.ORG                                                                                                                             
//                                                                                                                                                                                           
//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version   
//  3 of the License, or any later version.                                                                                                                                                  
//                                                                                                                                                                                           
//  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A                          
//  PARTICULAR PURPOSE.  See the GNU General Public License for more details.                                                                                                                
//                                                                                                                                                                                           
//  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.                                                  
//                                                                                                                                                                                           
//  CVS Revisins History                                                                                                                                                                     
//                                                                                                                                                                                           
//  $Log: not supported by cvs2svn $                                                                                                                                                                      
//    <<-- more -->>                                                                                                                                                                         
//  Title:  Core  
//  Path:  R6502_TC/Core/struct  
//  Edited:  by eda on 10 Feb 2009  
// 
//  VHDL Architecture R6502_TC.Core.struct
// 
//  Created:
//           by - eda.UNKNOWN (ENTWICKL4-XP-PR)
//           at - 11:47:57 23.02.2009
// 
//  Generated by Mentor Graphics' HDL Designer(TM) 2007.1a (Build 13)
// 
wire    [15:0] a_o; 
wire    [7:0] d_o; 
wire    rd_o; 
wire    sync_o; 
wire    wr_o; 

//  Declarations
wire    [15:0] adr_nxt_pc_o_i; 
wire    [15:0] adr_o_i; 
wire    [15:0] adr_pc_o_i; 
wire    [15:0] adr_sp_o_i; 
wire    [7:0] ch_a_o_i; 
wire    [7:0] ch_b_o_i; 
wire    d_alu_n_o_i; 
wire    [7:0] d_alu_o_i; 
wire    d_alu_or_o_i; 
wire    [7:0] d_regs_in_o_i; 
wire    [7:0] d_regs_out_o_i; 
wire    fetch_o_i; 
wire    [1:0] ld_o_i; 
wire    ld_pc_o_i; 
wire    ld_sp_o_i; 
wire    load_regs_o_i; 
wire    nmi_o_i; 
wire    [15:0] offset_o_i; 
wire    [7:0] q_a_o_i; 
wire    [7:0] q_x_o_i; 
wire    [7:0] q_y_o_i; 
wire    reg_0flag_o_i; 
wire    reg_1flag_o_i; 
wire    reg_7flag_o_i; 
wire    sel_pc_in_o_i; 
wire    [1:0] sel_pc_val_o_i; 
wire    [1:0] sel_rb_in_o_i; 
wire    [1:0] sel_rb_out_o_i; 
wire    [1:0] sel_reg_o_i; 
wire    sel_sp_as_o_i; 
wire    sel_sp_in_o_i; 

//  ModuleWare signal declarations(v1.9) for instance 'U_11' of 'add'
wire    [8:0] mw_U_11temp_din0; 
wire    [8:0] mw_U_11temp_din1; 
reg     [8:0] mw_U_11sum; 

//  Component Declarations

//  Optional embedded configurations
//  pragma synthesis_off

//  pragma synthesis_on
//  ModuleWare code(v1.9) for instance 'U_11' of 'add'
reg      u_11combo_proc_temp_carry; 

assign mw_U_11temp_din0 = {1'b 0, ch_a_o_i}; 
assign mw_U_11temp_din1 = {1'b 0, ch_b_o_i}; 

always @(mw_U_11temp_din0 or mw_U_11temp_din1)
   begin : u_11combo_proc
   u_11combo_proc_temp_carry = 1'b 0;   
   mw_U_11sum <= mw_U_11temp_din0 + mw_U_11temp_din1 + u_11combo_proc_temp_carry;   
   end

assign d_alu_o_i = mw_U_11sum[7:0]; 
assign reg_0flag_o_i = mw_U_11sum[8]; 

//  ModuleWare code(v1.9) for instance 'U_8' of 'inv'
assign reg_1flag_o_i = ~d_alu_or_o_i; 

//  ModuleWare code(v1.9) for instance 'U_9' of 'inv'
assign reg_7flag_o_i = ~d_alu_n_o_i; 

//  ModuleWare code(v1.9) for instance 'U_10' of 'inv'
assign d_alu_n_o_i = ~d_alu_o_i[7]; 

//  ModuleWare code(v1.9) for instance 'U_7' of 'por'
assign d_alu_or_o_i = d_alu_o_i[0] | d_alu_o_i[1] | d_alu_o_i[2] | d_alu_o_i[3] | 
      d_alu_o_i[4] | d_alu_o_i[5] | d_alu_o_i[6] | d_alu_o_i[7]; 

//  Instance port mappings.
FSM_Execution_Unit U_4 (.adr_nxt_pc_i(adr_nxt_pc_o_i),
          .adr_pc_i(adr_pc_o_i),
          .adr_sp_i(adr_sp_o_i),
          .clk_clk_i(clk_clk_i),
          .d_alu_i(d_alu_o_i),
          .d_i(d_i),
          .d_regs_out_i(d_regs_out_o_i),
          .irq_n_i(irq_n_i),
          .nmi_i(nmi_o_i),
          .q_a_i(q_a_o_i),
          .q_x_i(q_x_o_i),
          .q_y_i(q_y_o_i),
          .rdy_i(rdy_i),
          .reg_0flag_i(reg_0flag_o_i),
          .reg_1flag_i(reg_1flag_o_i),
          .reg_7flag_i(reg_7flag_o_i),
          .rst_rst_n_i(rst_rst_n_i),
          .so_n_i(so_n_i),
          .a_o(a_o),
          .adr_o(adr_o_i),
          .ch_a_o(ch_a_o_i),
          .ch_b_o(ch_b_o_i),
          .d_o(d_o),
          .d_regs_in_o(d_regs_in_o_i),
          .fetch_o(fetch_o_i),
          .ld_o(ld_o_i),
          .ld_pc_o(ld_pc_o_i),
          .ld_sp_o(ld_sp_o_i),
          .load_regs_o(load_regs_o_i),
          .offset_o(offset_o_i),
          .rd_o(rd_o),
          .sel_pc_in_o(sel_pc_in_o_i),
          .sel_pc_val_o(sel_pc_val_o_i),
          .sel_rb_in_o(sel_rb_in_o_i),
          .sel_rb_out_o(sel_rb_out_o_i),
          .sel_reg_o(sel_reg_o_i),
          .sel_sp_as_o(sel_sp_as_o_i),
          .sel_sp_in_o(sel_sp_in_o_i),
          .sync_o(sync_o),
          .wr_o(wr_o));
FSM_NMI U_6 (.clk_clk_i(clk_clk_i),
          .fetch_i(fetch_o_i),
          .nmi_n_i(nmi_n_i),
          .rst_rst_n_i(rst_rst_n_i),
          .nmi_o(nmi_o_i));
RegBank_AXY U_2 (.clk_clk_i(clk_clk_i),
          .d_regs_in_i(d_regs_in_o_i),
          .load_regs_i(load_regs_o_i),
          .rst_rst_n_i(rst_rst_n_i),
          .sel_rb_in_i(sel_rb_in_o_i),
          .sel_rb_out_i(sel_rb_out_o_i),
          .sel_reg_i(sel_reg_o_i),
          .d_regs_out_o(d_regs_out_o_i),
          .q_a_o(q_a_o_i),
          .q_x_o(q_x_o_i),
          .q_y_o(q_y_o_i));
Reg_PC U_0 (.adr_i(adr_o_i),
          .clk_clk_i(clk_clk_i),
          .ld_i(ld_o_i),
          .ld_pc_i(ld_pc_o_i),
          .offset_i(offset_o_i),
          .rst_rst_n_i(rst_rst_n_i),
          .sel_pc_in_i(sel_pc_in_o_i),
          .sel_pc_val_i(sel_pc_val_o_i),
          .adr_nxt_pc_o(adr_nxt_pc_o_i),
          .adr_pc_o(adr_pc_o_i));
Reg_SP U_1 (.adr_low_i(adr_o_i[7:0]),
          .clk_clk_i(clk_clk_i),
          .ld_low_i(ld_o_i[0]),
          .ld_sp_i(ld_sp_o_i),
          .rst_rst_n_i(rst_rst_n_i),
          .sel_sp_as_i(sel_sp_as_o_i),
          .sel_sp_in_i(sel_sp_in_o_i),
          .adr_sp_o(adr_sp_o_i));

//  Architecture declarations
//  Internal signal declarations

endmodule // module Core

